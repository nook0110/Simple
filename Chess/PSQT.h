#pragma once

#include "Evaluation.h"

namespace SimpleChessEngine
{
// clang-format off
inline std::array<std::array<std::array<TaperedEval, kBoardArea>, kPieceTypes>,
                  kColors>
    kPSQT = {{
        // White pieces table
        {{// Empty squares values are irrelevant since kNone is not being placed
          // or removed at any time
          {},
          // Pawns
          {{{0, 0},     {0, 0},     {0, 0},     {0, 0},     {0, 0},
            {0, 0},     {0, 0},     {0, 0},     {-10, -30}, {-10, -30},
            {0, 0},     {0, 0},     {0, 0},     {40, 0},    {40, 0},
            {40, 0},    {-20, -30}, {-20, -30}, {10, 0},    {30, 0},
            {30, 0},    {20, 0},    {30, 0},    {-20, -30}, {-30, 0},
            {-30, 0},   {-10, 0},   {75, 0},    {75, 0},    {-20, 0},
            {-50, 20},  {-50, 0},   {-30, 50},  {-30, 75},  {-20, 75},
            {45, 75},   {45, 75},   {-20, 75},  {-30, 75},  {-20, 50},
            {-20, 175}, {0, 200},   {0, 200},   {20, 200},  {20, 200},
            {0, 200},   {0, 200},   {0, 175},   {0, 350},   {0, 400},
            {0, 400},   {0, 400},   {0, 400},   {0, 400},   {0, 400},
            {0, 350},   {0, 0},     {0, 0},     {0, 0},     {0, 0},
            {0, 0},     {0, 0},     {0, 0},     {0, 0}}},
          // Knights
          {{{-150, -100}, {0, 0},       {-80, -50},   {-70, -10},  {-70, -10},
            {-80, -50},   {0, 0},       {-150, -100}, {-80, -70},  {-40, -50},
            {-20, -20},   {-10, 10},    {-10, 10},    {-20, -20},  {-40, -50},
            {-80, -70},   {-70, -50},   {},           {50, 20},    {20, 0},
            {20, 0},      {50, 20},     {},           {-70, -50},  {-25, -40},
            {},           {60, 50},     {50, 40},     {50, 40},    {60, 50},
            {},           {-25, -40},   {-30, -50},   {},          {},
            {20, 40},     {20, 40},     {},           {},          {-30, -50},
            {0, -50},     {},           {},           {100, 50},   {100, 50},
            {},           {},           {0, -50},     {-60, -60},  {-20, -50},
            {},           {},           {},           {},          {-20, -50},
            {-60, -60},   {-200, -100}, {-70, -90},   {-40, -50},  {-30, -10},
            {-30, -10},   {-40, -50},   {-70, -90},   {-200, -100}}},
          // Bishops
          {{{-50, -70}, {-20, -40}, {},         {-50, -30}, {-50, -30},
            {},         {-20, -40}, {-50, -70}, {-30, -40}, {30, 30},
            {},         {},         {},         {},         {30, 30},
            {-30, -40}, {},         {},         {},         {},
            {},         {},         {},         {},         {},
            {},         {},         {},         {},         {},
            {},         {},         {},         {},         {},
            {},         {},         {},         {},         {},
            {},         {},         {},         {},         {},
            {},         {},         {},         {-30, -40}, {},
            {},         {},         {},         {},         {},
            {-30, -40}, {-50, -70}, {-20, -40}, {-30, -40}, {-40, -30},
            {-40, -30}, {-30, -40}, {-20, -40}, {-50, -70}}},
          // Rooks

          {{{-30, 0}, {}, {}, {}, {}, {}, {}, {-30, 0}, {}, {}, {}, {}, {},
            {},       {}, {}, {}, {}, {}, {}, {},       {}, {}, {}, {}, {},
            {},       {}, {}, {}, {}, {}, {}, {},       {}, {}, {}, {}, {},
            {},       {}, {}, {}, {}, {}, {}, {},       {}, {}, {}, {}, {},
            {},       {}, {}, {}, {}, {}, {}, {},       {}, {}, {}, {}}},
          // Queen
          {{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
            {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
            {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {},
            {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
          // King
          {{{250, 0},    {300, 0},    {250, -50},  {50, -100},  {50, -100},
            {250, -50},  {300, 0},    {250, 0},    {150, 0},    {},
            {},          {},          {},          {},          {},
            {150, 0},    {},          {},          {-100, 50},  {-100, 50},
            {-100, 50},  {-100, 50},  {},          {},          {},
            {},          {-100, 50},  {-100, 100}, {-100, 100}, {-100, 50},
            {},          {},          {0, 50},     {0, 50},     {-100, 50},
            {-100, 100}, {-100, 100}, {-100, 50},  {0, 50},     {0, 50},
            {0, 50},     {0, 50},     {-100, 50},  {-100, 50},  {-100, 50},
            {-100, 50},  {0, 50},     {0, 50},     {0, 50},     {0, 50},
            {0, 50},     {0, 50},     {0, 50},     {0, 50},     {0, 50},
            {0, 50},     {},          {},          {},          {},
            {},          {},          {},          {}}}}}
        // Black pieces table is initialized symmetrically to the white pieces
        // table
    }};
// clang-format on

inline void InitPSQT()
{
  for (auto piece : {Piece::kPawn, Piece::kKnight, Piece::kBishop, Piece::kRook,
                     Piece::kQueen, Piece::kKing})
  {
    for (BitIndex square = 0; square < kBoardArea; ++square)
    {
      const auto [file, rank] = GetCoordinates(square);
      const BitIndex new_square = GetSquare(file, 7 - rank);
      kPSQT[static_cast<size_t>(Player::kBlack)][static_cast<size_t>(piece)]
           [new_square] = kPSQT[static_cast<size_t>(Player::kWhite)]
                               [static_cast<size_t>(piece)][square];
    }
  }
}
}  // namespace SimpleChessEngine