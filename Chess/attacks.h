#ifndef ATTACKS_H
#define ATTACKS_H

#include <immintrin.h>
#include "globals.h"

extern unsigned bishopBase[64];
extern unsigned rookBase[64];

// bishop pseudo-attacks on empty board
// outer squares excluded
inline constexpr bitboard bishopMask[64] = {
    18049651735527936ull, 70506452091904ull, 275415828992ull, 1075975168ull, 38021120ull, 8657588224ull, 2216338399232ull, 567382630219776ull,
    9024825867763712ull, 18049651735527424ull, 70506452221952ull, 275449643008ull, 9733406720ull, 2216342585344ull, 567382630203392ull, 1134765260406784ull,
    4512412933816832ull, 9024825867633664ull, 18049651768822272ull, 70515108615168ull, 2491752130560ull, 567383701868544ull, 1134765256220672ull, 2269530512441344ull,
    2256206450263040ull, 4512412900526080ull, 9024834391117824ull, 18051867805491712ull, 637888545440768ull, 1135039602493440ull, 2269529440784384ull, 4539058881568768ull,
    1128098963916800ull, 2256197927833600ull, 4514594912477184ull, 9592139778506752ull, 19184279556981248ull, 2339762086609920ull, 4538784537380864ull, 9077569074761728ull,
    562958610993152ull, 1125917221986304ull, 2814792987328512ull, 5629586008178688ull, 11259172008099840ull, 22518341868716544ull, 9007336962655232ull, 18014673925310464ull,
    2216338399232ull, 4432676798464ull, 11064376819712ull, 22137335185408ull, 44272556441600ull, 87995357200384ull, 35253226045952ull, 70506452091904ull,
    567382630219776ull, 1134765260406784ull, 2832480465846272ull, 5667157807464448ull, 11333774449049600ull, 22526811443298304ull, 9024825867763712ull, 18049651735527936ull
};

// rook pseudo-attacks on empty board
// outer squares excluded
inline constexpr bitboard rookMask[64] = {
	282578800148862ull, 565157600297596ull, 1130315200595066ull, 2260630401190006ull, 4521260802379886ull, 9042521604759646ull, 18085043209519166ull, 36170086419038334ull,
    282578800180736ull, 565157600328704ull, 1130315200625152ull, 2260630401218048ull, 4521260802403840ull, 9042521604775424ull, 18085043209518592ull, 36170086419037696ull,
    282578808340736ull, 565157608292864ull, 1130315208328192ull, 2260630408398848ull, 4521260808540160ull, 9042521608822784ull, 18085043209388032ull, 36170086418907136ull,
    282580897300736ull, 565159647117824ull, 1130317180306432ull, 2260632246683648ull, 4521262379438080ull, 9042522644946944ull, 18085043175964672ull, 36170086385483776ull,
    283115671060736ull, 565681586307584ull, 1130822006735872ull, 2261102847592448ull, 4521664529305600ull, 9042787892731904ull, 18085034619584512ull, 36170077829103616ull,
    420017753620736ull, 699298018886144ull, 1260057572672512ull, 2381576680245248ull, 4624614895390720ull, 9110691325681664ull, 18082844186263552ull, 36167887395782656ull,
    35466950888980736ull, 34905104758997504ull, 34344362452452352ull, 33222877839362048ull, 30979908613181440ull, 26493970160820224ull, 17522093256097792ull, 35607136465616896ull,
    9079539427579068672ull, 8935706818303361536ull, 8792156787827803136ull, 8505056726876686336ull, 7930856604974452736ull, 6782456361169985536ull, 4485655873561051136ull, 9115426935197958144ull
};

// knight attacks
// outer squares included
constexpr bitboard knight_attacks[64] = {
    132096ull, 329728ull, 659712ull, 1319424ull, 2638848ull, 5277696ull, 10489856ull, 4202496ull,
    33816580ull, 84410376ull, 168886289ull, 337772578ull, 675545156ull, 1351090312ull, 2685403152ull, 1075839008ull,
    8657044482ull, 21609056261ull, 43234889994ull, 86469779988ull, 172939559976ull, 345879119952ull, 687463207072ull, 275414786112ull,
    2216203387392ull, 5531918402816ull, 11068131838464ull, 22136263676928ull, 44272527353856ull, 88545054707712ull, 175990581010432ull, 70506185244672ull,
    567348067172352ull, 1416171111120896ull, 2833441750646784ull, 5666883501293568ull, 11333767002587136ull, 22667534005174272ull, 45053588738670592ull, 18049583422636032ull,
    145241105196122112ull, 362539804446949376ull, 725361088165576704ull, 1450722176331153408ull, 2901444352662306816ull, 5802888705324613632ull, 11533718717099671552ull, 4620693356194824192ull,
    288234782788157440ull, 576469569871282176ull, 1224997833292120064ull, 2449995666584240128ull, 4899991333168480256ull, 9799982666336960512ull, 1152939783987658752ull, 2305878468463689728ull,
    1128098930098176ull, 2257297371824128ull, 4796069720358912ull, 9592139440717824ull, 19184278881435648ull, 38368557762871296ull, 4679521487814656ull, 9077567998918656ull
};

// king attacks
// outer squares included
constexpr bitboard king_attacks[64] = {
    770ull, 1797ull, 3594ull, 7188ull, 14376ull, 28752ull, 57504ull, 49216ull,
    197123ull, 460039ull, 920078ull, 1840156ull, 3680312ull, 7360624ull, 14721248ull, 12599488ull,
    50463488ull, 117769984ull, 235539968ull, 471079936ull, 942159872ull, 1884319744ull, 3768639488ull, 3225468928ull,
    12918652928ull, 30149115904ull, 60298231808ull, 120596463616ull, 241192927232ull, 482385854464ull, 964771708928ull, 825720045568ull,
    3307175149568ull, 7718173671424ull, 15436347342848ull, 30872694685696ull, 61745389371392ull, 123490778742784ull, 246981557485568ull, 211384331665408ull,
    846636838289408ull, 1975852459884544ull, 3951704919769088ull, 7903409839538176ull, 15806819679076352ull, 31613639358152704ull, 63227278716305408ull, 54114388906344448ull,
    216739030602088448ull, 505818229730443264ull, 1011636459460886528ull, 2023272918921773056ull, 4046545837843546112ull, 8093091675687092224ull, 16186183351374184448ull, 13853283560024178688ull,
    144959613005987840ull, 362258295026614272ull, 724516590053228544ull, 1449033180106457088ull, 2898066360212914176ull, 5796132720425828352ull, 11592265440851656704ull, 4665729213955833856ull
};

extern bitboard bishop_attacks[6000];
extern bitboard rook_attacks[105000];

void init_sliding_maps();

inline bitboard attack_map(const Piece piece, const square sq, const bitboard occ = EMPTY_BOARD)
{
	switch (piece)
	{
    case KNIGHT:
        return knight_attacks[sq];
	case BISHOP:
		return bishop_attacks[bishopBase[sq] + _pext_u64(occ, bishopMask[sq])];
	case ROOK:
		return rook_attacks[rookBase[sq] + _pext_u64(occ, rookMask[sq])];
	case QUEEN:
		return attack_map(BISHOP, sq, occ) | attack_map(ROOK, sq, occ);
    case KING:
        return king_attacks[sq];
	default:
		break;
	}
}

#endif // !ATTACKS_H
